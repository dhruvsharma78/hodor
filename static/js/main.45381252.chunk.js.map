{"version":3,"sources":["HodorText.js","HodorForm.js","App.js","serviceWorker.js","index.js"],"names":["spec","i","j","table","push","Math","floor","random","length","weightedRand","0","1","2","rand012","GenerateText","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hodor_name","getHodorName","bind","assertThisInitialized","getExclamations","len","str","x","console","log","react_default","a","createElement","className","React","Component","HodorText","state","val","update","_this2","setState","HodorText_GenerateText","HodorForm","onClick","callBack","App","HodorTextElement","current","createRef","document","title","src_HodorText_0","ref","src_HodorForm_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAGA,SAAsBA,GAClB,IAAIC,EAAGC,EAAGC,EAAQ,GAClB,IAAKF,KAAKD,EAIN,IAAKE,EAAI,EAAGA,EAAc,GAAVF,EAAKC,GAASC,IAC1BC,EAAMC,KAAKH,GAGnB,OAAO,WACH,OAAOE,EAAME,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMK,WAGxCC,CAAa,CAAEC,EAAG,GAAKC,EAAG,GAAKC,EAAG,IAChDC,OAEMC,cACF,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,WAAa,CACd,QACA,QACA,eAEJP,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IACpBA,EAAKW,gBAAkBX,EAAKW,gBAAgBF,KAArBR,OAAAS,EAAA,EAAAT,CAAAD,IARTA,iFAYd,IAAIf,EAAE,EACF2B,EAAMvB,KAAKC,MAAoB,GAAdD,KAAKE,UACtBsB,EAAM,GACV,IAAI5B,EAAE,EAAGA,EAAI2B,EAAK3B,IACd4B,GAAO,IAEX,OAAOA,yCAIP,IAAIC,EAAIzB,KAAKC,MAAoB,GAAdD,KAAKE,UAAgBY,KAAKI,WAAWf,OAExD,OADAuB,QAAQC,IAAIF,GACLX,KAAKI,WAAWO,oCAIvB,OACIG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcjB,KAAKK,eAAiBL,KAAKQ,0BA9BxCU,IAAMC,WAiDlBC,6MAbXC,MAAQ,CAACC,IAAI,KACbC,OAAS,WACLC,EAAKC,SAAS,CACVH,IAAI,6EAIR,OACIR,EAAAC,EAAAC,cAACU,EAAD,aATYR,IAAMC,WCzCfQ,0LATP,OACIb,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,UAAQY,QAAS5B,KAAKJ,MAAMiC,UAA5B,kBALKX,IAAMC,YC6BfW,cA1Bb,SAAAA,EAAYlC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,IAChBjC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,KAAAH,KAAMJ,KAWR2B,OAAS,WACP1B,EAAKkC,iBAAiBC,QAAQT,OAAO,CAACD,IAAI,KAX1CzB,EAAKwB,MAAQ,CAACC,IAAI,GAClBzB,EAAKkC,iBAAmBb,IAAMe,YAC9BpC,EAAK0B,OAAS1B,EAAK0B,OAAOjB,KAAZR,OAAAS,EAAA,EAAAT,CAAAD,IAJEA,mFAShBqC,SAASC,MAAQ,yCAQjB,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACoB,EAAD,CAAWC,IAAKrC,KAAK+B,mBACrBjB,EAAAC,EAAAC,cAACsB,EAAD,CAAWT,SAAU7B,KAAKuB,iBArBhBL,IAAMC,WCOJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASZ,SAASa,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.45381252.chunk.js","sourcesContent":["import React from 'react';\nimport './HodorText.css'\n\nfunction weightedRand(spec) {\n    var i, j, table = [];\n    for (i in spec) {\n        // The constant 10 below should be computed based on the\n        // weights in the spec for a correct and optimal table size.\n        // E.g. the spec {0:0.999, 1:0.001} will break this impl.\n        for (j = 0; j < spec[i] * 10; j++) {\n            table.push(i);\n        }\n    }\n    return function () {\n        return table[Math.floor(Math.random() * table.length)];\n    }\n}\nvar rand012 = weightedRand({ 0: 0.8, 1: 0.1, 2: 0.1 });\nrand012(); // random in distribution...\n\nclass GenerateText extends React.Component{\n    constructor(props){\n        super(props);\n        this.hodor_name = [\n            \"HODOR\",\n            \"hodor\",\n            \"HODOOOOORRR\"\n        ]\n        this.getHodorName = this.getHodorName.bind(this);\n        this.getExclamations = this.getExclamations.bind(this);\n    }\n\n    getExclamations(){\n        var i=0;\n        var len = Math.floor(Math.random()*10);\n        var str = \"\";\n        for(i=0; i < len; i++){\n            str += \"!\";\n        }\n        return str;\n    }\n\n    getHodorName(){\n        var x = Math.floor(Math.random()*10) % (this.hodor_name.length);\n        console.log(x);\n        return this.hodor_name[x];\n    }\n\n    render(){\n        return(\n            <h1 className=\"text-block\">{this.getHodorName() + this.getExclamations()}</h1>\n        );\n    }\n}\n\nclass HodorText extends React.Component {\n    state = {val:1};\n    update = () => {\n        this.setState({\n            val:1\n        });\n    }\n    render(){\n        return(\n            <GenerateText />\n        );\n    }\n}\n\nexport default HodorText;","import React from 'react';\nimport './HodorForm.css'\n\nclass HodorForm extends React.Component{\n    render(){\n        return(\n            <div>\n                {/* <input type=\"text\" placeholder=\"hodor?\"></input> */}\n                <p><button onClick={this.props.callBack}>HODOR</button></p>\n            </div>\n        );\n    }\n}\n\nexport default HodorForm;","import React from 'react';\nimport './App.css';\nimport HodorText from './HodorText.js'\nimport HodorForm from './HodorForm.js'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {val:0};\n    this.HodorTextElement = React.createRef();\n    this.update = this.update.bind(this);\n  }\n\n\n  componentDidMount(){\n    document.title = \"Hodor\"\n  }\n\n  update = () => {\n    this.HodorTextElement.current.update({val:0});\n  }\n\n  render(){\n    return(\n      <div className=\"App centered\">\n        <HodorText ref={this.HodorTextElement}/>\n        <HodorForm callBack={this.update}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}